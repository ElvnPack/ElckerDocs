(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{434:function(s,t,e){"use strict";e.r(t);var v=e(21),n=Object(v.a)({},(function(){var s=this,t=s.$createElement,e=s._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("p",[s._v("组件在EAdmin 中分为2个部分，一个引用第三方组件的方式， 二是自定义组件的方式。")]),s._v(" "),e("h2",{attrs:{id:"第三方组件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#第三方组件"}},[s._v("#")]),s._v(" 第三方组件")]),s._v(" "),e("p",[s._v("当下EAdmin 引入了element-plus 和 vxe-table 组件，文件位于 build、libs下")]),s._v(" "),e("p",[s._v("若需要引入其他的组件，则需要")]),s._v(" "),e("p",[s._v("1.编写构建脚本")]),s._v(" "),e("p",[s._v("在bulid/libs下创建引入的UI文件夹，在该文件夹下创建index.ts 作为配置")]),s._v(" "),e("div",{staticClass:"language-nodejs extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("\nimport 组件 from xxxx\n\nexport function Elcker组件名称(app: App<Element>): void {\n  app.use(组件);\n}\n\n")])])]),e("p",[s._v("2.引入样式")]),s._v(" "),e("p",[s._v("1.可以在组件的配置文件中引入；")]),s._v(" "),e("p",[s._v("2.也可以在 src\\assets\\theme\\plugins.css 中引入，")]),s._v(" "),e("p",[s._v("2中方式，看使用情况而定。")]),s._v(" "),e("p",[s._v("3.并入加载配置")]),s._v(" "),e("p",[s._v("build\\libs\\ElckerLibs.ts 中配置引入即可")]),s._v(" "),e("h2",{attrs:{id:"本地组件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#本地组件"}},[s._v("#")]),s._v(" 本地组件")]),s._v(" "),e("p",[s._v("本地组件开发时位于 src\\components 目录下")]),s._v(" "),e("ul",[e("li",[e("p",[s._v("module 为 elcker 或者 自身项目开发的组件")])]),s._v(" "),e("li",[e("p",[s._v("business 为 自身项目开发的组件")])])]),s._v(" "),e("p",[s._v("以上为约定原则。")])])}),[],!1,null,null,null);t.default=n.exports}}]);